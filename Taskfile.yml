version: '3'

dotenv: ['.env']

includes:
  db: ./db/Taskfile.yml

tasks:
  setup-dev:
    desc: "Set up the local dev environment"
    cmds:
      - echo "Setting up dev environment..."
      - python -m venv venv
      - source venv/bin/activate
      - python -m pip install -r requirements.txt
      - python -m pip install -e ".[dev]"
      - echo "✅ Development environment setup complete"
      
  verify-deps:
    desc: "Verify that dependencies are installed correctly"
    cmds:
      - source venv/bin/activate
      - |
        echo "Checking sqlalchemy..."
        python -m pip show sqlalchemy | grep -q "Name: sqlalchemy" || { echo "❌ sqlalchemy not found"; exit 1; }
        echo "✅ sqlalchemy found"
      - |
        echo "Checking openai..."
        python -m pip show openai | grep -q "Name: openai" || { echo "❌ openai not found"; exit 1; }
        echo "✅ openai found"
      - |
        echo "Checking sentence-transformers..."
        python -m pip show sentence-transformers | grep -q "Name: sentence-transformers" || { echo "❌ sentence-transformers not found"; exit 1; }
        echo "✅ sentence-transformers found"
      - |
        echo "Checking pgvector..."
        python -m pip show pgvector | grep -q "Name: pgvector" || { echo "❌ pgvector not found"; exit 1; }
        echo "✅ pgvector found"
      - |
        echo "Checking psycopg2-binary..."
        python -m pip show psycopg2-binary | grep -q "Name: psycopg2-binary" || { echo "❌ psycopg2-binary not found"; exit 1; }
        echo "✅ psycopg2-binary found"
      - echo "All dependencies verified successfully! ✅"

  freeze:
    desc: "Generate requirements.txt with only top-level dependencies"
    cmds:
      - source venv/bin/activate
      - python -m pip list --not-required --format=freeze > requirements.txt
      - echo "✅ Generated requirements.txt with top-level dependencies"

  clean:cache:
    desc: "Clean Python cache files"
    cmds:
      - find . -type d -name "__pycache__" -exec rm -r {} +
      - find . -type f -name "*.pyc" -delete
      - find . -type f -name "*.pyo" -delete
      - find . -type f -name "*.pyd" -delete
      - find . -type f -name ".pytest_cache" -delete
      - echo "✅ Cleaned Python cache files"

  test:unit:
    desc: "Run Python unit tests"
    deps: [clean:cache]
    cmds:
      - source venv/bin/activate
      - pytest tests/unit/
      - echo "✅ All tests passed"

  db:test-connectivity:
    desc: "Test database connectivity and list databases"
    cmds:
      - env PGPASSWORD=${POSTGRES_PASSWORD} psql -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c "SELECT 1;"
      - env PGPASSWORD=${POSTGRES_PASSWORD} psql -h localhost -p 5433 -U postgres -l
      - echo PGPASSWORD=${POSTGRES_PASSWORD} psql -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c "SELECT 1;"

  test:integration:
    desc: "Run integration tests"
    deps: [db:test-connectivity, clean:cache]
    cmds:
      - sleep 5
      - echo "Testing database connectivity..."
      - docker compose exec db psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c "SELECT 1;"
      - echo "Creating test database..."
      - docker compose exec db psql -U ${POSTGRES_USER} -d postgres -c "DROP DATABASE IF EXISTS vectordb_test;"
      - docker compose exec db psql -U ${POSTGRES_USER} -d postgres -c "CREATE DATABASE vectordb_test;"
      - docker compose exec db psql -U ${POSTGRES_USER} -d vectordb_test -c "CREATE EXTENSION IF NOT EXISTS vector;"
      - docker compose exec db psql -U ${POSTGRES_USER} -d postgres -c "GRANT ALL PRIVILEGES ON DATABASE vectordb_test TO ${POSTGRES_USER};"
      - docker compose exec db psql -U ${POSTGRES_USER} -d vectordb_test -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO ${POSTGRES_USER};"
      - docker compose exec db psql -U ${POSTGRES_USER} -d vectordb_test -c "GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO ${POSTGRES_USER};"
      - env PGPASSWORD=${POSTGRES_PASSWORD} psql -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c "SELECT 1;"
      - env PGPASSWORD=${POSTGRES_PASSWORD} psql -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -d vectordb_test -c "SELECT 1;"
      - venv/bin/pytest tests/integration -v

  test:all:
    desc: "Run all tests (unit and integration)"
    deps: [db:up, clean:cache]
    cmds:
      - sleep 5
      - venv/bin/pytest tests -v

  coverage:py:
    desc: "Run Python tests with coverage report"
    deps: [clean:cache]
    cmds:
      - source venv/bin/activate
      - pytest tests/ --cov=src/rag --cov-report=term-missing
      - echo "✅ Coverage report generated"

  format:
    desc: "Format Python code"
    cmds:
      - source venv/bin/activate
      - black src/ tests/
      - isort src/ tests/
      - echo "✅ Code formatted"

  typecheck:
    desc: "Run type checking"
    cmds:
      - source venv/bin/activate
      - mypy src/
      - echo "✅ Type checking complete"

  lint:
    desc: "Run all code quality checks"
    deps: [format, typecheck, test:py]

  db:recreate:
    desc: "Recreate database from scratch"
    cmds:
      - task: db:down
      - task: db:up
      - sleep 5
      - env PGPASSWORD=${POSTGRES_PASSWORD} psql -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -d postgres -c "DROP DATABASE IF EXISTS ${POSTGRES_DB};"
      - env PGPASSWORD=${POSTGRES_PASSWORD} psql -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -d postgres -c "CREATE DATABASE ${POSTGRES_DB};"
      - env PGPASSWORD=${POSTGRES_PASSWORD} psql -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c "CREATE EXTENSION IF NOT EXISTS vector;"

  demo:mock:
    desc: "Run example ingestion flow with mock embedder"
    cmds:
      - python src/scripts/run_example.py examples/sample.txt mock

  demo:openai:
    desc: "Run example ingestion flow with OpenAI embedder"
    cmds:
      - python src/scripts/run_example.py examples/sample.txt openai

  psql:
    desc: "Start an interactive psql session"
    cmds:
      - env PGPASSWORD=${POSTGRES_PASSWORD} psql -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -d ${POSTGRES_DB}
