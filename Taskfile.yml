version: '3'

dotenv: ['.env']

includes:
  db: ./db/Taskfile.yml

tasks:
  install:
    desc: Install package in development mode with all dependencies
    cmds:
      - pip install -e .
      - pip install -e ".[dev]"

  setup-dev:
    desc: "Set up the local dev environment"
    cmds:
      - echo "Setting up dev environment..."
      - python -m venv venv
      - source venv/bin/activate
      - python -m pip install -r requirements.txt
      - python -m pip install -e ".[dev]"
      - echo "✅ Development environment setup complete"
      
  verify-deps:
    desc: "Verify that dependencies are installed correctly"
    cmds:
      - source venv/bin/activate
      - |
        echo "Checking sqlalchemy..."
        python -m pip show sqlalchemy | grep -q "Name: sqlalchemy" || { echo "❌ sqlalchemy not found"; exit 1; }
        echo "✅ sqlalchemy found"
      - |
        echo "Checking openai..."
        python -m pip show openai | grep -q "Name: openai" || { echo "❌ openai not found"; exit 1; }
        echo "✅ openai found"
      - |
        echo "Checking sentence-transformers..."
        python -m pip show sentence-transformers | grep -q "Name: sentence-transformers" || { echo "❌ sentence-transformers not found"; exit 1; }
        echo "✅ sentence-transformers found"
      - |
        echo "Checking pgvector..."
        python -m pip show pgvector | grep -q "Name: pgvector" || { echo "❌ pgvector not found"; exit 1; }
        echo "✅ pgvector found"
      - |
        echo "Checking psycopg2-binary..."
        python -m pip show psycopg2-binary | grep -q "Name: psycopg2-binary" || { echo "❌ psycopg2-binary not found"; exit 1; }
        echo "✅ psycopg2-binary found"
      - echo "All dependencies verified successfully! ✅"

  freeze:
    desc: Generate requirements files
    cmds:
      # Generate core requirements first
      - pip install -e "."
      - pip freeze --exclude-editable > requirements.txt
      # Generate dev requirements next
      - pip install -e ".[dev]"
      - pip freeze --exclude-editable > requirements-dev.txt
    sources:
      - setup.py
    generates:
      - requirements.txt
      - requirements-dev.txt

  test:all:
    desc: "Run Python tests"
    cmds:
      - pytest tests/
      - echo "✅ All tests passed"

  test:name:
    desc: "Run a specific test by name"
    cmds:
      - pytest tests/ -k "{{.CLI_ARGS}}"
      - echo "✅ Test completed"

  test:integration:
    desc: "Run integration tests"
    cmds:
      - sleep 5  # Give DB time to start
      - pytest tests/integration -v

  test:single:
    desc: "Run a single test"
    cmds:
      - pytest "{{.CLI_ARGS}}"
      - echo "✅ Test completed"


  test:coverage:
    desc: "Run Python tests with coverage report"
    cmds:
      - pytest tests/ --cov=src/rag --cov-report=term-missing
      - echo "✅ Coverage report generated"

  format:
    desc: "Format Python code"
    cmds:
      - black src/ tests/
      - isort src/ tests/
      - echo "✅ Code formatting complete"

  typecheck:
    desc: "Run type checking"
    cmds:
      - mypy src/
      - echo "✅ Type checking complete"

  lint:
    desc: "Run all code quality checks"
    deps: [format, typecheck, test:all]


  documentation:create-project-markdown:
    desc: "Create Markdown for LLMs"
    cmds:
      - create-project-markdown

  db:recreate:
    desc: "Recreate database from scratch"
    cmds:
      - task: db:down
      - task: db:up
      - sleep 5  # Give DB time to start
      - |
        PGPASSWORD=${POSTGRES_PASSWORD} psql -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -d postgres -c "DROP DATABASE IF EXISTS ${POSTGRES_DB};"
      - |
        PGPASSWORD=${POSTGRES_PASSWORD} psql -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -d postgres -c "CREATE DATABASE ${POSTGRES_DB};"
      - |
        PGPASSWORD=${POSTGRES_PASSWORD} psql -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c "CREATE EXTENSION IF NOT EXISTS vector;"

  demo:mock:
    desc: "Run example ingestion flow with mock embedder"
    cmds:
      - python src/scripts/run_example.py examples/sample.txt mock

  demo:openai:
    desc: "Run example ingestion flow with OpenAI embedder"
    cmds:
      - python src/scripts/run_example.py examples/sample.txt openai

  psql:
    desc: "Start an interactive psql session"
    cmds:
      - PGPASSWORD=${POSTGRES_PASSWORD} psql -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -d ${POSTGRES_DB}
